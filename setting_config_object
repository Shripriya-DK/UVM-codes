import uvm_pkg::*;
`include "uvm_macros.svh"

class confi extends uvm_object;
	`uvm_object_utils(confi)
	int no_of_agents;
	int number;
	uvm_active_passive_enum is_active;
	function new(string name="confi");
		super.new(name);
	endfunction
endclass

class sequencer extends uvm_sequencer;
	`uvm_component_utils(sequencer)
	function new(string name="sequencer",uvm_component parent);
		super.new(name,parent);
	endfunction
	virtual function void build_phase(uvm_phase phase);
		super.build_phase(phase);
	endfunction
endclass

class driver extends uvm_driver;
	`uvm_component_utils(driver)
	function new(string name="driver",uvm_component parent);
		super.new(name,parent);
	endfunction
	confi cfi;
		virtual function void build_phase(uvm_phase phase);
		super.build_phase(phase);
		uvm_config_db#(confi)::get(this,"","config",cfi);
			$display("In build phase of driver %0d",cfi.number);
		endfunction
endclass

class monitor extends uvm_monitor;
	`uvm_component_utils(monitor)
	function new(string name="monitor",uvm_component parent);
		super.new(name,parent);
	endfunction
	virtual function void build_phase(uvm_phase phase);
		super.build_phase(phase);
	endfunction
endclass
	
class agent extends uvm_agent;
	`uvm_component_utils(agent)
	function new(string name="agent",uvm_component parent);
		super.new(name,parent);
	endfunction
	driver drvh;
	monitor monh;
	sequencer seqh;
	confi cfh;
	uvm_active_passive_enum is_active;
	virtual function void build_phase(uvm_phase phase);
		super.build_phase(phase);
		monh = monitor::type_id::create("monh",this);
		uvm_config_db#(confi)::get(this,"","config",cfh);
		if(cfh.is_active==UVM_ACTIVE)
		begin
				seqh = sequencer::type_id::create("seqh",this);
				drvh = driver::type_id::create("drvh",this);
		end
	endfunction
endclass

class agt_top extends uvm_env;
	`uvm_component_utils(agt_top)
	int n;
	agent agt[];
	confi cf;
	function new(string name="agt_top",uvm_component parent);
		super.new(name,parent);
	endfunction
	virtual function void build_phase(uvm_phase phase);
		super.build_phase(phase);
		if(!uvm_config_db#(confi)::get(this,"","config",cf))
			`uvm_fatal("agt_top","check strings")
		agt = new[cf.no_of_agents];
		foreach(agt[i])
			agt[i]=agent::type_id::create($sformatf("agt[%0d]",i),this);
	endfunction
endclass

class env extends uvm_env;
	`uvm_component_utils(env)
	agt_top agtp;
	function new(string name="env",uvm_component parent);
		super.new(name,parent);
	endfunction
	virtual function void build_phase(uvm_phase phase);
		super.build_phase(phase);
		agtp = agt_top::type_id::create("agtp",this);
	endfunction
endclass

class test extends uvm_test;
	`uvm_component_utils(test)
	env evh;
	int n;
	confi cfg;
	function new(string name="test",uvm_component parent);
		super.new(name,parent);
	endfunction
	virtual function void build_phase(uvm_phase phase);
		super.build_phase(phase);
		evh = env::type_id::create("evh",this);
		cfg = confi::type_id::create("cfg");
		cfg.no_of_agents = 5;
		cfg.is_active = UVM_ACTIVE;
		uvm_config_db#(int)::get(null,"","int",n);
		$display("The n value is %0d",n);
		cfg.number = n;
		uvm_config_db#(confi)::set(this,"*","config",cfg);
	endfunction
	
	virtual function void end_of_elaboration_phase(uvm_phase phase);
		super.end_of_elaboration_phase(phase);
		uvm_top.print_topology();
	endfunction
endclass
		
module top;
int n = 7;
	initial
		begin
			uvm_config_db#(int)::set(null,"*","int",n);
			run_test("test");
		end
endmodule
		 
	
