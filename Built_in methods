import uvm_pkg::*;
`include "uvm_macros.svh"

class trans extends uvm_sequence_item;
	rand int a;
	string s;
	`uvm_object_utils(trans)
	
	function new(string name="trans");
		super.new(name);
	endfunction
	
	constraint c1{a>5;a<17;}
	
	virtual function void do_print(uvm_printer printer);
		printer.print_field("a",a,$size(a),UVM_DEC);
		printer.print_string("string",s);
	endfunction	
	
	virtual function void do_copy(uvm_object rhs);
		trans t;
			$cast(t,rhs);
			this.a = t.a; //with which we are classing
			this.s = t.s;
	endfunction
	
	virtual function bit do_compare(uvm_object rhs, uvm_comparer comparer);
		trans t;
			$cast(t,rhs);
		return this.a==a && this.s==t.s;
	endfunction
endclass

trans t1,t2,t3;

module top;
	initial
	begin
	t1 = trans::type_id::create("t1");
	t1.randomize();
	t1.s = "maven";
////////////////PRINT//////////////////////
	t1.print(uvm_default_table_printer);
	t1.print(uvm_default_line_printer);
	t1.print(uvm_default_tree_printer);
/////////////////COPY//////////////////////
	t2 = trans::type_id::create("t2");
	t2.copy(t1);
	t2.print(uvm_default_table_printer);
///////////////CLONE//////////////////
	$cast(t3,t1.clone());
	$display("T3 OBJECT");
	t3.print(uvm_default_table_printer);
	t3.s = "silicon";
	t1.print(uvm_default_table_printer);
	t3.print(uvm_default_table_printer);
///////////////COMPARE/////////////////
	if(t2.compare(t3))
		$display("MATCH DONE");
	else
		$display("MISMATCH");
	end
endmodule
